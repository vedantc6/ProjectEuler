# Solution to the archived problems of Project Euler

# Libraries imported
from math import sqrt, ceil
import fractions
import time
import datetime
import itertools

# Problem 1 : Multiples of 3 and 5 
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

def mul_3_5_sum(arr):
	start = time.time()
	total = 0
	for i in arr:
		if (i % 3 == 0) and (i % 5 == 0):
			total += i
		elif (i % 3 == 0):
			total += i
		elif (i % 5 == 0):
			total += i
		else:
			pass

	return total, time.time() - start 

p = 1
result, total_time = mul_3_5_sum(range(0,1000))
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 2 : Even Fibonacci numbers
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def even_fibonacci(arr):
	start = time.time()
	x = arr
	i = total = 0
	while (x[len(x)-1] < 4000000):
		x.append(x[i]+x[i+1])
		i += 1
	x.pop()

	for j in x:
		if j % 2 == 0:
			total += j
		else:
			pass

	return total, time.time() - start

p += 1
result, total_time = even_fibonacci([1,2])
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 3: Largest Prime Factor
# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

def prime_factor(num):
	start = time.time()
	factors = []
	if num % 2 == 0:
		factors.append(2)

	for i in range(3, int(sqrt(num))):
		flg = 0
		if num % i == 0:
			for prime in factors:
				if i % prime == 0:
					flg = 1 
			
			if flg == 0:
				factors.append(i)
		i += 2

	return max(factors), time.time() - start

p += 1
result, total_time = prime_factor(600851475143)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 4: Largest Palinrome Product
# A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.

def largest_palindrome(n):
	start = time.time()
	upper_limit = 0
	for i in range(0, n):
		upper_limit *= 10
		upper_limit += 9

	lower_limit = 1 + upper_limit//10
	
	max_product = 0
	for i in range(upper_limit, lower_limit-1, -1):
		for j in range(i, lower_limit-1, -1):
			product = i*j
			if product < max_product:
				break

			number = product
			reverse = 0

			while number != 0:
				reverse = number % 10 + reverse*10
				number = number//10

			if reverse == product and product > max_product:
				max_product = product
				
	return max_product, time.time() - start				

p += 1
result, total_time = largest_palindrome(3)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))


# Problem 5: Smallest Multiple
# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

def smallest_multiple(nums, technique):
	start = time.time()
	if technique == "normal":
		multiple = 2
		while True:
			multiple += 1
			for x in nums:
				if multiple % x != 0:
					break
				else:
					multiple *= x
					if x == max(nums):
						return multiple
	elif technique == "gcd":
		multiple = 2
		for i in nums:
			multiple = (multiple*i)/fractions.gcd(multiple, i)

		return int(multiple), time.time() - start

p += 1
result, total_time = smallest_multiple(list(range(2,21)), "gcd")
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))


# Problem 6: Sum square difference
# The sum of the squares of the first ten natural numbers is,
# 12 + 22 + ... + 102 = 385
# The square of the sum of the first ten natural numbers is,
# (1 + 2 + ... + 10)2 = 552 = 3025
# Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

def sum_sq_diff(nums):
	start = time.time()
	sum_sq = sq_sum = 0
	for i in nums:
		sum_sq += i**2
		sq_sum += i

	return (sq_sum**2 - sum_sq, time.time() - start)

p += 1
result, total_time = sum_sq_diff(list(range(1,101)))
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))


# Problem 7: 10001st Prime
# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10 001st prime number?

def _10001prime(n):
	start = time.time()
	while True:
		prime_list = [True for i in range(n+1)]
		p = 2
		prime_l = []
		while (p*p < n):
			if (prime_list[p] == True):
				for i in range(p*2, n+1, p):
					prime_list[i] = False
			p += 1

		for prime in range(2, n+1):
			if prime_list[prime]:
				prime_l.append(prime)

		if len(prime_l) >= 10001:
			break
		else:
			n *= 10
	
	return prime_l[10000], time.time() - start

p += 1
result, total_time = _10001prime(10000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))


# Problem 8: Largest product in a series
# The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

def _13adj_prod(n, seq):
	start = time.time()
	n_len = len(n)
	max_prod = 0

	for i in range(1, n_len - seq + 1):
		prod = 1
		for j in range(i, i + seq):
			prod *= int(n[j])

		if prod > max_prod:
			max_prod = prod

	return max_prod, time.time() - start

n = '73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450'

p += 1
result, total_time = _13adj_prod(n, 13)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))


# Problem 9: Special Pythagorean Triplet
# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
# a2 + b2 = c2
# For example, 32 + 42 = 9 + 16 = 25 = 52.
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.

def pyth_triplet(num):
	start = time.time()
	for a in range(1, num):
		for b in range(a, num - a):
			c = num - b - a
			if a*a + b*b == c*c:
				return a*b*c, time.time() - start

p += 1
result, total_time = pyth_triplet(1000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))


# Problem 10: Summation of primes
# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# Find the sum of all the primes below two million.

def sum_primes(n):
	start = time.time()
	prime_list = [True for i in range(n+1)]
	p = 2
	prime_l = []
	while p*p < n:
		if prime_list[p] == True:
			for i in range(p*2, n+1, p):
				prime_list[i] = False
		p += 1

	for i in range(2, n):
		if prime_list[i]:
			prime_l.append(i)

	return sum(prime_l), time.time() - start

p += 1
result, total_time = sum_primes(2000000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 11: Largest product in a grid
# What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?

def prod_grid(arr):
	start = time.time()
	product = 1

	horizontal_max = max(arr[i][j]*arr[i][j+1]*arr[i][j+2]*arr[i][j+3] for i in range(20) for j in range(17))

	vertical_max = max(arr[i][j]*arr[i+1][j]*arr[i+2][j]*arr[i+3][j] for i in range(17) for j in range(20))

	diagonal1_max = max(arr[i][j]*arr[i+1][j+1]*arr[i+2][j+2]*arr[i+3][j+3] for i in range(17) for j in range(17))

	diagonal2_max = max(arr[i][j]*arr[i-1][j+1]*arr[i-2][j+2]*arr[i-3][j+3] for i in range(3,20) for j in range(17))

	product = max(horizontal_max, vertical_max, diagonal1_max, diagonal2_max)

	return product, time.time() - start

grid = [	[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
			[49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
			[81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
			[52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
			[22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
			[24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
			[32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
			[67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
			[24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
			[21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95],
			[78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
			[16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
			[86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
			[19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
			[4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
			[88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
			[4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
			[20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
			[20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
			[1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]
		]

p += 1
result, total_time = prod_grid(grid)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 12: Highly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# What is the value of the first triangle number to have over five hundred divisors?
def divisors(num):
	no_factors = 0 
	for i in range(1, int(ceil(sqrt(num)))):
		if num % i == 0:
			no_factors += 2
		if i*i == num:
			no_factors -= 1

	return no_factors

def traingular_num(n):
	start = time.time()	
	triangle = 1

	for natural in range(2, n+1):
		# triangle += natural
		triangle = natural*(natural+1)/2
		if natural % 2 == 0:
			cnt = divisors(natural/2)*divisors(natural+1)
		else:
			cnt = divisors(natural)*divisors((natural+1)/2)

		# print (triangle, "....", cnt)
		if cnt >= 500:
			break

	return int(triangle), time.time() - start

p += 1
result, total_time = traingular_num(1000000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 12: Large Sum
# Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

def large_sum(num):
	start = time.time()
	l = [num[i:i+50] for i in range(0, len(num), 50)]
	sum1 = 0
	for i in l:
		sum1 += int(i)

	sum1 = str(sum1)
	return sum1[:10], time.time() - start

number = '37107287533902102798797998220837590246510135740250\
46376937677490009712648124896970078050417018260538\
74324986199524741059474233309513058123726617309629\
91942213363574161572522430563301811072406154908250\
23067588207539346171171980310421047513778063246676\
89261670696623633820136378418383684178734361726757\
28112879812849979408065481931592621691275889832738\
44274228917432520321923589422876796487670272189318\
47451445736001306439091167216856844588711603153276\
70386486105843025439939619828917593665686757934951\
62176457141856560629502157223196586755079324193331\
64906352462741904929101432445813822663347944758178\
92575867718337217661963751590579239728245598838407\
58203565325359399008402633568948830189458628227828\
80181199384826282014278194139940567587151170094390\
35398664372827112653829987240784473053190104293586\
86515506006295864861532075273371959191420517255829\
71693888707715466499115593487603532921714970056938\
54370070576826684624621495650076471787294438377604\
53282654108756828443191190634694037855217779295145\
36123272525000296071075082563815656710885258350721\
45876576172410976447339110607218265236877223636045\
17423706905851860660448207621209813287860733969412\
81142660418086830619328460811191061556940512689692\
51934325451728388641918047049293215058642563049483\
62467221648435076201727918039944693004732956340691\
15732444386908125794514089057706229429197107928209\
55037687525678773091862540744969844508330393682126\
18336384825330154686196124348767681297534375946515\
80386287592878490201521685554828717201219257766954\
78182833757993103614740356856449095527097864797581\
16726320100436897842553539920931837441497806860984\
48403098129077791799088218795327364475675590848030\
87086987551392711854517078544161852424320693150332\
59959406895756536782107074926966537676326235447210\
69793950679652694742597709739166693763042633987085\
41052684708299085211399427365734116182760315001271\
65378607361501080857009149939512557028198746004375\
35829035317434717326932123578154982629742552737307\
94953759765105305946966067683156574377167401875275\
88902802571733229619176668713819931811048770190271\
25267680276078003013678680992525463401061632866526\
36270218540497705585629946580636237993140746255962\
24074486908231174977792365466257246923322810917141\
91430288197103288597806669760892938638285025333403\
34413065578016127815921815005561868836468420090470\
23053081172816430487623791969842487255036638784583\
11487696932154902810424020138335124462181441773470\
63783299490636259666498587618221225225512486764533\
67720186971698544312419572409913959008952310058822\
95548255300263520781532296796249481641953868218774\
76085327132285723110424803456124867697064507995236\
37774242535411291684276865538926205024910326572967\
23701913275725675285653248258265463092207058596522\
29798860272258331913126375147341994889534765745501\
18495701454879288984856827726077713721403798879715\
38298203783031473527721580348144513491373226651381\
34829543829199918180278916522431027392251122869539\
40957953066405232632538044100059654939159879593635\
29746152185502371307642255121183693803580388584903\
41698116222072977186158236678424689157993532961922\
62467957194401269043877107275048102390895523597457\
23189706772547915061505504953922979530901129967519\
86188088225875314529584099251203829009407770775672\
11306739708304724483816533873502340845647058077308\
82959174767140363198008187129011875491310547126581\
97623331044818386269515456334926366572897563400500\
42846280183517070527831839425882145521227251250327\
55121603546981200581762165212827652751691296897789\
32238195734329339946437501907836945765883352399886\
75506164965184775180738168837861091527357929701337\
62177842752192623401942399639168044983993173312731\
32924185707147349566916674687634660915035914677504\
99518671430235219628894890102423325116913619626622\
73267460800591547471830798392868535206946944540724\
76841822524674417161514036427982273348055556214818\
97142617910342598647204516893989422179826088076852\
87783646182799346313767754307809363333018982642090\
10848802521674670883215120185883543223812876952786\
71329612474782464538636993009049310363619763878039\
62184073572399794223406235393808339651327408011116\
66627891981488087797941876876144230030984490851411\
60661826293682836764744779239180335110989069790714\
85786944089552990653640447425576083659976645795096\
66024396409905389607120198219976047599490197230297\
64913982680032973156037120041377903785566085089252\
16730939319872750275468906903707539413042652315011\
94809377245048795150954100921645863754710598436791\
78639167021187492431995700641917969777599028300699\
15368713711936614952811305876380278410754449733078\
40789923115535562561142322423255033685442488917353\
44889911501440648020369068063960672322193204149535\
41503128880339536053299340368006977710650566631954\
81234880673210146739058568557934581403627822703280\
82616570773948327592232845941706525094512325230608\
22918802058777319719839450180888072429661980811197\
77158542502016545090413245809786882778948721859617\
72107838435069186155435662884062257473692284509516\
20849603980134001723930671666823555245252804609722\
53503534226472524250874054075591789781264330331690'

p += 1
result, total_time = large_sum(number)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 14: Collatz Sequence
# The following iterative sequence is defined for the set of positive integers:
# n → n/2 (n is even)
# n → 3n + 1 (n is odd)
# Using the rule above and starting with 13, we generate the following sequence:
# 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
# It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
# Which starting number, under one million, produces the longest chain?

# def collatz_num(n):
# 	start = time.time()
# 	i = n
# 	max_chain = []
	
# 	for i in range(1, n):
# 		chain = [i]
# 		while i != 1:
# 			if i % 2 == 0:
# 				i /= 2
# 			else:
# 				i = 3*i + 1
# 			chain.append(i)
# 			if i == 1:
# 				break

# 		if len(chain) > len(max_chain):
# 			max_chain = chain

# 	# print (max_chain)
# 	return max_chain[0], time.time() - start

p += 1
# result, total_time = collatz_num(13)
# print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 15: Lattice Paths
# Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
# How many such routes are there through a 20×20 grid?

def lattice_paths(m, n):
	start = time.time()
	count = [[0 for i in range(m)] for j in range(n)]

	# first horizontal and first vertical lines have value 1
	for i in range(m):
		count[i][0] = 1

	for j in range(n):
		count[0][j] = 1

	for i in range(1, m):
		for j in range(1, n):
			count[i][j] = count[i-1][j] + count[i][j-1]

	return count[m-1][n-1], time.time() - start

p += 1
result, total_time = lattice_paths(21, 21)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 16: Power digit sum
# 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
# What is the sum of the digits of the number 2^1000?

def power_digit_sum(x, y):
	start = time.time()
	def power(x, y):
		if y == 0:
			return 1
		temp = power(x, int(y/2))
		
		if y % 2 == 0:
			return temp*temp
		else:
			if (y > 0):
				return x*temp*temp
			else:
				return temp*temp / x

	power_val = str(power(x, y))
	sum1 = 0
	for i in power_val:
		sum1 += int(i)

	return sum1, time.time() - start

p += 1
result, total_time = power_digit_sum(2, 1000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 17: Number letter counts
# If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
# If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?

def num_to_letter(num_range):
	start = time.time()
	num_to_dict = {
					1 : "one",
					2 : "two",
					3 : "three",
					4 : "four",
					5 : "five",
					6 : "six",
					7 : "seven",
					8 : "eight",
					9 : "nine",
					10 : "ten",
					11 : "eleven",
					12 : "twelve",
					13 : "thirteen",
					14 : "fourteen",
					15 : "fifteen",
					16 : "sixteen",
					17 : "seventeen",
					18 : "eighteen",
					19 : "nineteen",
					20 : "twenty",
					30 : "thirty",
					40 : "fourty",
					50 : "fifty",
					60 : "sixty",
					70 : "seventy",
					80 : "eighty",
					90 : "ninety"
	}

	number_txt = ''

	for num in range(1,num_range+1):
		if (num > 20 and num < 100) and num not in num_to_dict:
			number_txt += num_to_dict[num//10] + num_to_dict[num%10]
		
		elif (num >= 100 and num < 1000) and num not in num_to_dict:
			if num % 100 == 0:
				number_txt += num_to_dict[num//100] + "hundred"
			else:
				hundreds = num // 100
				num = num - hundreds*100
				if num not in num_to_dict:
					number_txt += num_to_dict[hundreds] + "hundredand" + num_to_dict[num//10] + num_to_dict[num%10]
				else:
					number_txt += num_to_dict[hundreds] + "hundredand" + num_to_dict[num]
		
		elif num in num_to_dict:
			number_txt += num_to_dict[num]

		elif num == 1000:
			number_txt += "onethousand"

	return len(number_txt), time.time() - start


p += 1
result, total_time = num_to_letter(1000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 18: Maximum path sum I
# By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
# 3
# 7 4
# 2 4 6
# 8 5 9 3
# That is, 3 + 7 + 4 + 9 = 23.
# Find the maximum total from top to bottom of the triangle below:

def make2dList(rows, cols):
    a = []
    for row in range(rows): 
    	a += [[0]*cols]
    
    return a

def max_path_sum(arr, m, n):
	for i in range(m-1, -1, -1):
		for j in range(i+1):
			if arr[i+1][j] > arr[i+1][j+1]:
				arr[i][j] += arr[i+1][j]
			else:
				arr[i][j] += arr[i+1][j+1] 
	
	return arr[0][0]

def max_path_sum_wrapper(triangle):
	start = time.time()
	max_length = 0
	for i in range(len(triangle)):
		length = len(triangle[i])
		if length > max_length:
			max_length = length

	new_list = make2dList(len(triangle), max_length)

	for i in range(len(triangle)):
		for j in range(len(triangle[i])):
			new_list[i][j] = triangle[i][j]
		
	total_sum = max_path_sum(new_list, len(new_list) - 1, max_length - 1)
	return total_sum, time.time() - start

triangle = [[75],
			[95, 64],
			[17, 47, 82],
			[18, 35, 87, 10],
			[20, 4, 82, 47, 65],
			[19, 1, 23, 75, 3, 34],
			[88, 2, 77, 73, 7, 63, 67],
			[99, 65, 4, 28, 6, 16, 70, 92],
			[41, 41, 26, 56, 83, 40, 80, 70, 33],
			[41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
			[53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
			[70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
			[91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
			[63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
			[4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]
			]

p += 1
result, total_time = max_path_sum_wrapper(triangle)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 19: Counting Sundays
# You are given the following information, but you may prefer to do some research for yourself.
# 1 Jan 1900 was a Monday.
# Thirty days has September,
# April, June and November.
# All the rest have thirty-one,
# Saving February alone,
# Which has twenty-eight, rain or shine.
# And on leap years, twenty-nine.
# A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
# How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?

def count_sundays(start_year, end_year):
	start = time.time()
	# start date is 1st Jan, 1901, which was a Tuesday
	counts = 0
	month = 1
	cur_date = datetime.date(start_year, month, 1)

	while int(cur_date.strftime("%Y")) < end_year:
		if int(cur_date.strftime("%w")) == 0:
			counts += 1
		if month + 1 == 13:
			month = 1
			start_year += 1
		else:
			month += 1
		cur_date = datetime.date(start_year, month, 1)

	return counts, time.time() - start

p += 1
result, total_time = count_sundays(1901, 2001)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 20: Factorial digit sum
# n! means n × (n − 1) × ... × 3 × 2 × 1
# For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
# and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
# Find the sum of the digits in the number 100!

def fact_sum(n):
	start = time.time()
	i = n
	mul = 1
	total_sum = 0

	while i > 0:
		mul *= i
		i -= 1

	for digit in str(mul):
		total_sum += int(digit)

	return total_sum, time.time() - start

p += 1
result, total_time = fact_sum(100)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 21: Amicable numbers
# Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
# If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
# For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
# Evaluate the sum of all the amicable numbers under 10000.

def sum_proper_div(num):
	div_sum = 0
	for i in range(1, num//2 + 1):
		if num % i == 0:
			div_sum += i
	
	return div_sum

def amicable_num(n):
	start = time.time()
	answer = 0
	for x in range(4, n):
		if sum_proper_div(x) > 4:
			if sum_proper_div(sum_proper_div(x)) == x and sum_proper_div(x) !=x:
				answer += x
				# print(x, "and", sum_proper_div(x))

	return answer, time.time() - start

p += 1
result, total_time = amicable_num(10000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 22: Names scores
# Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
# For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.
# What is the total of all the name scores in the file?

def score(txt):
	score = 0
	alphabet = ["A", "B", "C", "D", "E", "F", "G", "H",
    "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S",
    "T", "U", "V", "W", "X", "Y", "Z"]
	for i in txt:
		score += alphabet.index(i) + 1
	return score

def names_scores(text):
	start = time.time()
	with open(text, "r") as f:
		text_list = f.read().replace("\"", '').split(",")

	sum1 = 0
	text_list = sorted(text_list)
	for txt in text_list:
		sum1 = sum1 + (score(txt)*(text_list.index(txt) + 1))
	
	return sum1, time.time() - start

p += 1
result, total_time = names_scores("p022_names.txt")
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 23: Non-abundant numbers
# A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
# A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
# As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.
# Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.

# def divisors(num):
# 	div_sum = 0
# 	for i in range(1, (num // 2) + 1):
# 		if num % i == 0:
# 			div_sum += i
# 	return div_sum

# def abundant_nums(limit):
#     abundant = []
#     for i in range(1, limit):
#         if divisors(i) > i:
#             abundant.append(i)

#     return abundant

# def non_abundant(limit):
# 	start = time.time()
# 	abundant = abundant_nums(limit + 1)
# 	sums = [0]*(limit+1)
# 	non_abundant = 0
# 	for x in range(len(abundant)):
# 		for y in range(x, len(abundant)):
# 			sumOfabundant = abundant[x] + abundant[y]
# 			if sumOfabundant <= limit:
# 				if sums[sumOfabundant] == 0:
# 					sums[sumOfabundant] = sumOfabundant

# 	for i in range(1, len(sums)):
# 		if sums[i] == 0:
# 			non_abundant += i

# 	return non_abundant, time.time() - start
 
p += 1
# result, total_time = non_abundant(28123)
# print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 24: Lexicographic permutations
# A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
# 012   021   102   120   201   210
# What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?

def lexicographic(nums):
	start = time.time()
	permutations = list(itertools.permutations(nums))
	str1 = ''.join(str(x) for x in permutations[999999])
	return str1, time.time() - start

p += 1
result, total_time = lexicographic([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 25: 1000-digit fibonacci number
# The Fibonacci sequence is defined by the recurrence relation:
# Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
# Hence the first 12 terms will be:
# F1 = 1
# F2 = 1
# F3 = 2
# F4 = 3
# F5 = 5
# F6 = 8
# F7 = 13
# F8 = 21
# F9 = 34
# F10 = 55
# F11 = 89
# F12 = 144
# The 12th term, F12, is the first term to contain three digits.
# What is the index of the first term in the Fibonacci sequence to contain 1000 digits?

def fibonacci():
	starts = time.time()
	series = [0, 1, 1]
	start = 3
	end = 5000
	for i in range(start, end):
		series.append(series[i-1] + series[i-2])
		if len(str(series[i])) >= 1000:
			return i, time.time() - starts
		else:
			continue

p += 1
result, total_times = fibonacci()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_times))

# Problem 26: Reciprocal cycles
# A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:
# 1/2	= 	0.5
# 1/3	= 	0.(3)
# 1/4	= 	0.25
# 1/5	= 	0.2
# 1/6	= 	0.1(6)
# 1/7	= 	0.(142857)
# 1/8	= 	0.125
# 1/9	= 	0.(1)
# 1/10	= 	0.1
# Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.
# Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.

# def prime_sieve(n):
# 	prime = [True for i in range(n+1)]
# 	p = 2
# 	while (p*p <= n):
# 		if (prime[p] == True):
# 			for i in range(p*2, n+1, p):
# 				prime[i] = False
# 		p += 1
	
# 	prime_nums = []
# 	for p in range(2, n):
# 		if prime[p]:
# 			prime_nums.append(p)
# 	return prime_nums
def prime_sieve(n):
    sieve = [True] * (n//2)
    for i in range(3,int(n**0.5)+1,2):
        if sieve[i//2]:
            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)
    return [2] + [2*i+1 for i in range(1,n//2) if sieve[i]]

def reciprocal_cylces(num):
	start = time.time()
	if num < 8:
		return 3, time.time() - start

	for d in prime_sieve(num)[::-1]:
		period = 1
		while pow(10, period, d) != 1:
			period += 1
		if (d - 1) == period:
			return d, time.time() - start
	return 0

p += 1
result, total_time = reciprocal_cylces(1000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 27: Quadratic primes
# Euler discovered the remarkable quadratic formula:
# n2+n+41
# It turns out that the formula will produce 40 primes for the consecutive integer values 0≤n≤39. However, when n=40,402+40+41=40(40+1)+41 is divisible by 41, and certainly when n=41,412+41+41 is clearly divisible by 41.
# The incredible formula n2−79n+1601 was discovered, which produces 80 primes for the consecutive values 0≤n≤79. The product of the coefficients, −79 and 1601, is −126479.
# Considering quadratics of the form:
# n2+an+b, where |a|<1000 and |b|≤1000
# where |n| is the modulus/absolute value of n
# e.g. |11|=11 and |−4|=4
# Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n=0.

def is_prime(n):
	if n < 2: return 0
	elif n == 2: return 1
	elif n % 2 == 0: return 0
	else:
		for x in range(3, int(sqrt(n) + 1), 2):
			if n % x == 0: 
				return 0
	return 1

def quad_primes(n):
	start = time.time()
	primes = prime_sieve(n)
	longest = 0
	for b in primes:
		for a in range(-999, 1000, 2):
			image = b
			n = 0
			while is_prime(image):
				n += 1
				image = n**2 + a*n + b
			if n > longest:
				longest = n
				result = a*b
	return result, time.time() - start
	
p += 1
result, total_time = quad_primes(1000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 28: Number spiral diagonals
# Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:
# 21 22 23 24 25
# 20  7  8  9 10
# 19  6  1  2 11
# 18  5  4  3 12
# 17 16 15 14 13
# It can be verified that the sum of the numbers on the diagonals is 101.
# What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?

def num_spiral(n):
	if n == 1:
		return 1
	return 4*n*n - 6*n + 6 + num_spiral(n-2)

def num_spiral_wrapper(n):
	start = time.time()
	value = num_spiral(n)
	return value, time.time() - start
	
p += 1
result, total_time = num_spiral_wrapper(1001)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 29: Distinct powers
# Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
# 22=4, 23=8, 24=16, 25=32
# 32=9, 33=27, 34=81, 35=243
# 42=16, 43=64, 44=256, 45=1024
# 52=25, 53=125, 54=625, 55=3125
# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
# How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

def distinct_powers():
	start = time.time()
	l = []
	for a in range(2,101):
		for b in range(2,101):
			l.append(a**b)

	return len(set(l)), time.time() - start

p += 1
result, total_time = distinct_powers()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 30: Digit fifth powers
# Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:
# 1634 = 1^4 + 6^4 + 3^4 + 4^4
# 8208 = 8^4 + 2^4 + 0^4 + 8^4
# 9474 = 9^4 + 4^4 + 7^4 + 4^4
# As 1 = 14 is not a sum it is not included.
# The sum of these numbers is 1634 + 8208 + 9474 = 19316.
# Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.

def digit_fifth(n):
	start = time.time()
	total = 0
	for i in range(2, n+1):
		sums = 0
		j = i
		while j:
			digit = j % 10
			sums += digit**5
			j = j // 10
		if sums == i:
			total += sums

	return total, time.time() - start
p += 1
# Since 9^5 = 59049, 5x9^5 = 295245
result, total_time = digit_fifth(295245)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 31: Coin sums
# In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:
# 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
# It is possible to make £2 in the following way:
# 1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
# How many different ways can £2 be made using any number of coins?

def coin_sums(n):
	start = time.time()
	coins = [1, 2, 5, 10, 20, 50, 100, 200]
	combinations = [0]*201
	combinations[0] = 1
	for c in coins:
		for i in range(1, len(combinations)):
			if i>=c:
				combinations[i] += combinations[i-c]

	return combinations[-1], time.time() - start

p += 1
result, total_time = coin_sums(200)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 32: Pandigital products
# We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.
# The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.
# Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.
# HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.

def pandigital_prod():
	start = time.time()
	products = set()
	to_be_checked = set('123456789')

	# for single digit multiplication
	for i in range(1,10):
		for j in range(1000, 10000):
			s = str(i) + str(j) + str(i*j)
			if len(s) == 9 and set(s) == to_be_checked:
				products.add(i*j)
			elif len(s) > 9:
				break

	# for double digit multiplication
	for i in range(10,100):
		for j in range(100,1000):
			s = str(i) + str(j) + str(i*j)
			if len(s) == 9 and set(s) == to_be_checked:
				products.add(i*j)
			elif len(s) > 9:
				break

	return sum(products), time.time() - start

p += 1
result, total_time = pandigital_prod()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 22: Digit cancelling fractions
# The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.
# We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
# There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.
# If the product of these four fractions is given in its lowest common terms, find the value of the denominator.

def digit_cancel():
	start = time.time()
	numprod = 1
	denprod = 1
	for i in range(1, 10):
		for den in range(1, i):
			for num in range(1, den):
				if ((num*10 + i)*den == num*(i*10 + den)):
					denprod *= den
					numprod *= num
	denprod /= fractions.gcd(numprod, denprod) 
	return denprod, time.time() - start

p += 1
result, total_time = digit_cancel()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 34: Digit factorials
# 145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
# Find the sum of all numbers which are equal to the sum of the factorial of their digits.
# Note: as 1! = 1 and 2! = 2 are not sums they are not included.

def digit_fact(limit):
	start = time.time()
	d = {0: 1,
		1: 1, 
		2: 2,
		3: 6,
		4: 24,
		5: 120,
		6: 720,
		7: 5040,
		8: 40320,
		9: 362880}

	total = 0

	for i in range(3, limit):
		sums = 0
		n = i
		while n !=0 :
			digit = n%10
			n = n//10
			sums += d[digit]
		if sums == i:
			# print(i)
			total += sums

	return total, time.time() - start

p += 1
result, total_time = digit_fact(50001)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 35: Circular primes
# The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
# There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
# How many circular primes are there below one million?

def sieve_of_eratosthenes(n):
	prime = [True for i in range(n+1)]
	p = 2
	prime[0] = prime[1] = False
	while (p*p <=n):
		if prime[p] == True:
			for i in range(p*2, n+1, p):
				prime[i] = False
		p += 1

	return prime

def circular_primes(n):
	start = time.time()
	l = []
	prime_list = sieve_of_eratosthenes(n)
	for i in range(2, n):
		if prime_list[i]:
			flag = 1
			str_n = str(i)
			for j in range(0, len(str_n)-1):
				temp = str_n[0]
				str_n = str_n[1:]
				str_n += temp
				if prime_list[int(str_n)] == False:
					flag = 0
			if flag:
				l.append(i)		
	return len(l), time.time() - start

p += 1
result, total_time = circular_primes(1000000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 36: Double-base palindromes
# The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.
# Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
# (Please note that the palindromic number, in either base, may not include leading zeros.)

def convert_to_base(num, base):
	str1 = ''
	while (num > 0):
		dig = num % base
		num = num // base
		str1 += str(dig)

	return str1

def reverse(num):
	rev = 0
	while (num > 0):
		dig = num % 10
		rev = rev*10 + dig
		num = num // 10

	return rev

def twobase_palind(n):
	start = time.time()
	total = 0
	for i in range(1, n, 2):
		temp = i
		rev = reverse(temp)

		if rev == i:
			binary = convert_to_base(i, 2)
			rev_bin = binary[::-1]
			if rev_bin == binary:
				total += i

	return total, time.time() - start

p += 1
result, total_time = twobase_palind(1000000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 37: Truncatable primes
# The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
# Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
# NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

def trunc_prime(n):
	start = time.time()
	prime_list = sieve_of_eratosthenes(n)
	total = 0
	
	def trunc(num):
		if num <= 0: return False
		
		len1 = 0
		temp = num

		while temp != 0:
			len1 += 1
			temp = temp // 10

		# Right truncate
		temp = num
		while temp != 0:
			if prime_list[temp] != True:
				return False
			temp = temp // 10

		# Left truncate
		temp = num
		while len1 > 1:
			y = temp % pow(10, len1 - 1)
			if prime_list[y] != True:
				return False
			len1 -= 1

		return True	
	
	numbers = 0
	i = 11

	while numbers < 11:
		if trunc(i):
			total += i
			numbers += 1
		i += 1

	return total, time.time() - start


p += 1
result, total_time = trunc_prime(1000000)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 38: Pandigital multiples
# Take the number 192 and multiply it by each of 1, 2, and 3:
# 192 × 1 = 192
# 192 × 2 = 384
# 192 × 3 = 576
# By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)
# The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
# What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?

# Fixed number must contain less than 5 digits since n > 1
# Number has to start with 9
# If fixed number is 2 digit, we wont be able to generate 9 digits since n = 3 yields 8 digit number and n = 4 yields 11 digit number
# Same goes for 3 digit number
# Search limited to 9123 to 9876 i.e. 753 numbers
# Now, if second digit > 4, a carry forward will happen when multiplied by 2, making 19xxx instead of 18xxx, i.e. 2 9s
# None of the fixed number digits should be 1, because then 2 1s
# New search limit: 9234 to 9487 i.e. 253 numbers
def is_pandigital(i, j):
	to_be_checked = set('123456789')
	s = str(i) + str(j)
	# print(s)
	if len(s) == 9 and set(s) == to_be_checked:
		return True
	return False

def pandigital_multiples():
	start = time.time()
	total = ''
	for i in range(9387, 9234, -1):
		# print(i, 2*i)
		j = 2*i
		if is_pandigital(i, j):
			total = str(i) + str(j)
			break

	return total, time.time() - start

p += 1
result, total_time = pandigital_multiples()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 39: Integer right triangles
# If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
# {20,48,52}, {24,45,51}, {30,40,50}
# For which value of p ≤ 1000, is the number of solutions maximised?

def right_triangles(n):
	start = time.time()
	max_l = []
	max_p = 0
	for p in range(n):
		l = []
		p_half = int(p/2)
		a = c = 0
		for b in range(1, p_half):
			a = p*(p-2*b)/(2*(p-b))
			if a.is_integer() and a > b:
				# print(int(a), b)
				c = sqrt(a**2 + b**2)
				if c.is_integer():
					l.append([int(a), b, int(c)])
		if len(l) > len(max_l):
			max_l = l
			max_p = p

	return max_p, time.time() - start 

p += 1
result, total_time = right_triangles(1001)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 40: Champernowne's constant
# An irrational decimal fraction is created by concatenating the positive integers:
# 0.123456789101112131415161718192021...
# It can be seen that the 12th digit of the fractional part is 1.
# If dn represents the nth digit of the fractional part, find the value of the following expression.
# d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000

def champernowne():
	start = time.time()
	str1 = ''
	i = 1
	while(len(str1) <= 1000000):
		str1 += str(i)
		if len(str1) <= 1000000:
			str2 = str1
		i += 1
	total = int(str2[0])*int(str2[9])*int(str2[99])*int(str2[999])*int(str2[9999])*int(str2[99999]) 
	return total, time.time() - start

p += 1
result, total_time = champernowne()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 41: Pandigital prime
# We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.
# What is the largest n-digit pandigital prime that exists?

def is_pandigital41(n, s=9):
	n = str(n)
	return len(n) == s and not '1234567890'[:s].strip(n)

def pandigital_prime(n):
	start = time.time()
	largest = 0
	for i in range(n, 2143, -2):
		if is_prime(i) and is_pandigital41(i, 7):
			largest = i
			break
	return largest, time.time() - start
	
p += 1
result, total_time = pandigital_prime(7654321)
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 42: Coded triangle numbers
# The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.
# Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?

def is_triangular(n):
	temp = (-1 + sqrt(1 + 8*n))/2
	if temp.is_integer(): return 1
	else: return 0

def coded_tri_num(text):
	start = time.time()
	# l_value = {'a': 1,'b': 2,'c': 3,'d': 4,'e': 5,
	# 				'f': 6,'g': 7,'h': 8,'i': 9,'j': 10,
	# 				'k': 11,'l': 12,'m': 13,'n': 14,'o': 15,
	# 				'p': 16,'q': 17,'r': 18,'s': 19,'t': 20,
	# 				'u': 21,'v': 22,'w': 23,'x': 24,'y': 25,
	# 				'z': 26}
	total = 0
	with open(text, "r") as f:
		text_list = f.read().replace("\"", '').split(",")

	for txt in text_list:
		value = score(txt)
		if is_triangular(value):
			total += 1
	return total, time.time() - start

p += 1
result, total_time = coded_tri_num('p042_words.txt')
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 43: Sub-string divisibility
# The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.
# Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:
# d2d3d4=406 is divisible by 2
# d3d4d5=063 is divisible by 3
# d4d5d6=635 is divisible by 5
# d5d6d7=357 is divisible by 7
# d6d7d8=572 is divisible by 11
# d7d8d9=728 is divisible by 13
# d8d9d10=289 is divisible by 17
# Find the sum of all 0 to 9 pandigital numbers with this property.

# Observations:
# d4d5d6 to be divisble by 5 means d6 is 0 or 5
# But if d6 = 0, d6d7d8 will not be pandigital and divisble by 11 as 011, 022 etc
# So d6 = 5, d6d7d8 can only be {506,517,528,539,561,572,583,594}
# For d7d8d9 to be divisible by 13, since d7 d8 limited to 8 obs, we can shorten the combinations of d6d7d8d9 to {5286,5390,5728,5832}
# Similary for d8d9d10, we get {52867, 53901, 57289}
# d5d6d7 must be divisble by 7, so d5d6d7d8d9d10 can be {952867,357289}
# Since d2d3d4 has to be divisble by 2, that means d4 can be 0,2,4,8. This makes our list of d4..d10 as {0952867,4952867, 0357289,4357289,6357289}
# d3d4d5 must be divisble by 3, so possible scenarios: {30952867,60357289,06357289}
# d1 and d2 are permutations of 1 and 4 now. So, 6 combinations

def substr_divisbility():
	start = time.time()	
	return (1430952867+1460357289+1406357289+4130952867+4160357289+4106357289), time.time() - start

p += 1
result, total_time = substr_divisbility()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 44: Pentagon numbers
# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

def is_pentagonal(n):
	temp = (sqrt(24*n + 1) + 1)/6
	if temp.is_integer(): return 1
	else: return 0

def pentagon_num():
	start = time.time()
	result = 0
	notfound = True
	i = 1
	while notfound:
		i += 1
		n = i*(3*i - 1)/2
		for j in range(i-1, 0, -1):
			m = j*(3*j - 1)/2
			if is_pentagonal(n-m) and is_pentagonal(n+m):
				result = n - m
				notfound = False
				break

	return result, time.time() - start

p += 1
result, total_time = pentagon_num()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 45: Triangular, pentagonal, and hexagonal
# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
# Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
# It can be verified that T285 = P165 = H143 = 40755.
# Find the next triangle number that is also pentagonal and hexagonal.

# Hexagonal numbers are triangular numbers only on an odd n

def tri_pent_hex():
	start = time.time()
	i = 143
	result = 0
	while True:
		i += 1
		result = i*(2*i - 1)
		if is_triangular(result) and is_pentagonal(result):
			break

	return result, time.time() - start

p += 1
result, total_time = tri_pent_hex()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 46: Goldbach's other conjecture
# It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.
# 9 = 7 + 2×12
# 15 = 7 + 2×22
# 21 = 3 + 2×32
# 25 = 7 + 2×32
# 27 = 19 + 2×22
# 33 = 31 + 2×12
# It turns out that the conjecture was false.
# What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?

def goldbach():
	start = time.time()
	n = 9
	goldbach = 0
	while True:
		found = False
		for i in range(n):
			prime = n - 2*(i**2)
			if is_prime(prime):
				found = True
				break
		if not found:
			goldbach = n
			break
		n += 2

	return goldbach, time.time() - start

p += 1
result, total_time = goldbach()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 47: Distinct primes factors
# The first two consecutive numbers to have two distinct prime factors are:
# 14 = 2 × 7
# 15 = 3 × 5
# The first three consecutive numbers to have three distinct prime factors are:
# 644 = 2² × 7 × 23
# 645 = 3 × 5 × 43
# 646 = 2 × 17 × 19.
# Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?

def p_factor(num):
	factors = []
	temp = num
	while num % 2 == 0:
		factors.append(2)
		num = num / 2

	for i in range(3, int(sqrt(num))+1, 2):
		while num % i == 0:
			factors.append(i)
			num = num // i

	if num > 2:
		factors.append(num)

	return len(set(factors))

def distinct_prime_factors():
	start = time.time()
	i = 100645
	while True:
		if p_factor(i) == p_factor(i+1) == p_factor(i+2) == p_factor(i+3) == 4:
			break
		i += 1

	return i, time.time() - start

p += 1
result, total_time = distinct_prime_factors()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 48: Self powers
# The series, 11 + 22 + 33 + ... + 1010 = 10405071317.
# Find the last ten digits of the series, 11 + 22 + 33 + ... + 10001000.

def self_powers():
	start = time.time()
	result = 10405071317
	for i in range(11, 1001):
		result += i**i

	result = str(result)
	return result[len(result) - 10:], time.time() - start

p += 1
result, total_time = self_powers()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))

# Problem 49: Prime permutations
# The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.
# There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.
# What 12-digit number do you form by concatenating the three terms in this sequence?

def prime_perm():
	start = time.time()
	i = 1009
	while True:
		l = []
		if is_prime(i):
			l.append(i)
			temp = [int(d) for d in str(i)]
			perm = itertools.permutations(temp)
			for p in perm:
				num = int(''.join(str(e) for e in p))
				if is_prime(num) and num not in l:
					l.append(num)

		if len(l) == 3:
			break
		i += 2
	
	print(l)
	return 1, time.time() - start

p += 1
result, total_time = prime_perm()
print ("Solution to Problem {} is {}, solved in {:.5f} seconds".format(p, result, total_time))
